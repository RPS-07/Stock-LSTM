# -*- coding: utf-8 -*-
"""ForecastingwithTimeSeriesDecomposition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16oLmhXaZWMd42mTVqTAfAGZp35vicAVC
"""

import pandas as pd
import numpy as np
from google.colab import files
from statsmodels.tsa.seasonal import STL

uploaded = files.upload()

data = pd.read_csv("CryptoData.csv")

data.head()

data["date"] = pd.to_datetime(data["date"])

prices = data["close"]

stl = STL(prices,period=60,seasonal=7)
result = stl.fit()

seasonal = result.seasonal
trend = result.trend
residual = result.resid

# Forecast price for the next 5 days
last_date = data["date"].iloc[-1]
forecast_date = pd.date_range(start=last_date, periods=5, freq="D")
forecasted_prices = trend + seasonal + residual

print("Forecasted prices for the next 5 days")
for date, price in zip(forecast_date, forecasted_prices):
  print(f"{date.date()}:{price:.2f}")

# Component Analysis
seasonal_naive = prices.rolling(window=13, min_periods=1, center=True).mean()
trend_naive = prices.rolling(window=30, min_periods=1, center=True).mean()
resid_naive = prices - seasonal_naive - trend_naive

seasonal_accuracy = np.mean(np.abs(seasonal-seasonal_naive))
trend_accuracy = np.mean(np.abs(trend-trend_naive))
residual_accuracy = np.mean(np.abs(residual-resid_naive))

print("Component Analysis:")
print(seasonal_accuracy)
print(trend_accuracy)
print(residual_accuracy)